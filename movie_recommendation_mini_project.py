# -*- coding: utf-8 -*-
"""Movie Recommendation Mini Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C5Z4LkrUQEdyO1zbMBrGMY7XAu3GiBNy
"""

import numpy as np
import pandas as pd
import warnings

warnings.filterwarnings('ignore')

"""ASSIGNING COLUMN NAMES"""

column_names=['User_id','Item_id','Rating','Timestamp']
df=pd.read_csv("u.data",sep='\t',names=column_names)

df.head()

df.shape

"""CHECKING UNIQUE VALUES"""

df['User_id'].nunique()

df['Item_id'].nunique()

"""READING FILE u.item having values separated by pipe(|)"""

movies_titles=pd.read_csv("u.item",sep='\|',header=None)

movies_titles=movies_titles[[0,1]]
movies_titles.columns=['Item_id','Titles']

movies_titles.head()

"""MERGING MOVIES_TITLES ON ITEM_ID FEATURE"""

df=pd.merge(df,movies_titles,on="Item_id")

df.tail()

"""EXPLORATORY DATA ANALYSIS"""

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('white')

df.groupby('Titles').mean()['Rating'].sort_values(ascending=False)

df.groupby('Titles').count()['Rating'].sort_values(ascending=False)

ratings=pd.DataFrame(df.groupby('Titles').mean()['Rating'])

ratings.head()

ratings['no. of ratings']=pd.DataFrame(df.groupby('Titles').count()['Rating'])

ratings

ratings.sort_values(by='Rating',ascending=False)

plt.figure(figsize=(10,6))
plt.hist(ratings['no. of ratings'],bins=70)
plt.show()

plt.hist(ratings['Rating'],bins=70)
plt.show()

"""ALPHA IS OPACITY"""

sns.jointplot(x='Rating',y='no. of ratings',data=ratings,alpha=0.5)

"""CREATING MOVIE RECOMMENDATION"""

df.head()

moviemat=df.pivot_table(index="User_id",columns="Titles",values="Rating")

moviemat.head()

starwars_user_ratings=moviemat['Star Wars (1977)']
starwars_user_ratings.head()

similar_to_starwars=moviemat.corrwith(starwars_user_ratings)

similar_to_starwars

"""CORRELATING ALL THE MOVIES WITH MOVIE STAR WARS AS IT HAS HIGHERS NUMBER OF RATINGS"""

corr_star_wars=pd.DataFrame(similar_to_starwars,columns=['Correlation'])

"""DROPPING NAN VALUES"""

#corr_star_wars=pd.DataFrame(similar_to_starwars,columns=['Correlation'])
corr_star_wars.dropna(inplace=True)

corr_star_wars

corr_star_wars.sort_values('Correlation',ascending=False).head(10)

ratings.head()

"""JOINING TWO DF'S"""

corr_starwars=corr_star_wars.join(ratings['no. of ratings'])

corr_starwars.head()

"""SORTING ACCORDING TO RATINGS > 100"""

corr_starwars[corr_starwars['no. of ratings']>100].sort_values('Correlation',ascending=False)

"""PREDICT FUNCTION"""

def predict_movies(movie_name):
  movie_user_ratings=moviemat[movie_name]
  similar_to_movie=moviemat.corrwith(movie_user_ratings)


  corr_movie=pd.DataFrame(similar_to_movie,columns=['Correlation'])
  corr_movie.dropna(inplace=True)

  corr_movie=corr_movie.join(ratings['no. of ratings'])
  predictions=corr_movie[corr_movie['no. of ratings']>100].sort_values('Correlation',ascending=False)

  return predictions

"""MAKING PREDICTIONS"""

predictions=predict_movies('Titanic (1997)')

predictions.head(10)





